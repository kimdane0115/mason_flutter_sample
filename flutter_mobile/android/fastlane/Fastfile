# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  # desc "Submit a new Beta Build to Crashlytics Beta"
  # lane :beta do
  #   gradle(task: "clean assembleRelease")
  #   crashlytics
  
  #   # sh "your_script.sh"
  #   # You can also use other beta testing services here
  # end
  desc "Push a new beta build to TestFlight"
  lane :beta do
    begin
      # Send slack message
      # before_send_slack_message(msg: "💫 Android Test 배포를 시작합니다.")

      # Add badge to app icon (only testbed)
      # add_badge_to_icon

      # Build app
      flutter_build_android

      version = get_properties_value(
        key: "flutter.versionName",
        path: "local.properties"
      )
      build = get_properties_value(
        key: "flutter.versionCode",
        path: "local.properties"
      )

      # upload play store
      # upload_to_play_store(
      #   version_name: "#{build} (#{version})",
      #   aab: "../build/app/outputs/bundle/release/app-release.aab", 
      #   track: "internal"
      # )

      # firebase distribute
      firebase_app_distribution(
        app: "1:753175679683:android:753e65d46178d08a76c876",
        apk_path: "../build/app/outputs/apk/prod/release/app-prod-release.apk",
        groups: "android"
      )

      # Send slack message
      # after_send_slack_message(msg: "🚀 Successfully distributed a new beta build ✨")
    ensure #finally
      # 앱 아이콘 이미지 초기화
      # icon_initialize
    end
  end

  # Flutter build Android
  desc "Flutter build Android"
  lane :flutter_build_android do
    puts "flutter clean"
    sh("flutter clean")
    
    puts "cd .."
    sh("cd", "..")

    puts "Flutter build Android"

    if ENV["ENV"] == "dev"
      sh("flutter", "build", "apk", "--debug", "--flavor", ENV['ENV'], "-t", ENV['MAIN_TARGET'])
    end

    if ENV["ENV"] == "staging"
      # sh("flutter", "build", "apk", "--debug", "--flavor", ENV['ENV'], "-t", ENV['MAIN_TARGET'])
      sh("flutter", "build", "apk", "--release", "--flavor", "prod", "-t", "lib/main_prod.dart")
    end
    
    if ENV["ENV"] == "prod"
      sh("flutter", "build", "appbundle", "--flavor", ENV['ENV'], "-t", ENV['MAIN_TARGET'])
    end
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end
